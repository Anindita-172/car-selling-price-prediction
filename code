from google.colab import drive
drive.mount('/content/drive')

# Importing necessary libraries

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
%matplotlib inline 

cars = pd.read_csv("Car details.csv")

cars.head(10)

cars.tail(5)

#Checking whether the data contains duplicate values or not
cars.duplicated().sum()

cars.info


cars.shape


cars.isnull()

cars.isnull().sum()

cars = cars.dropna(how = 'any')
cars.shape

import re

torque_list = cars['torque'].to_list()
# torque_list[:2]
torque_rpm = []
def extractingRPM(x):
  for item in x:
    res = item.replace(".", "")
    res = res.replace(",", "")
    temp = [int(s) for s in re.findall(r'\d+', res)]
    torque_rpm.append(max(temp))

extractingRPM(torque_list)


mil_list = cars['mileage'].to_list()
# torque_list[:2]
mil_kmpl = []
def extractingmil(x):
  for item in x:
    temp = []
    try:
      for s in item.split(" "):
        temp.append(float(s))
    except:
      pass
    mil_kmpl.append(max(temp))

extractingmil(mil_list)
print(mil_list[:2])
print(mil_kmpl[:2])

engine_list = cars['engine'].to_list()
# mileage_list[:2]
engine_rpm = []
def extractingRPM(x):
  for item in x:
    res = item.replace(".", "")
    res = res.replace(",", "")
    temp = [int(s) for s in re.findall(r'\d+', res)]
    engine_rpm.append(max(temp))

extractingRPM(engine_list)
print(engine_list[:2])
print(engine_rpm [:2])

cars_new = cars.drop(['mileage', 'engine', 'max_power', 'torque'], axis = 1)

plt.figure(figsize=(8,8))
sns.heatmap(cars_new.corr(),annot=True,cmap='viridis',linewidths=.5)

Categorical data to integer Data

# Our journey for finding categorical data.

cars_new['fuel'].value_counts()

cars_new['seller_type'].value_counts()

cars_new['transmission'].value_counts()

cars_new['owner'].value_counts()

def ref1(x):
  if x == 'Manual':
    return 1
  else:
    return 0

cars_new['transmission'] = cars_new['transmission'].map(ref1)

def ref2(x):
  if x == 'Individual':
    return 1
  elif x == 'Dealer':
    return 0
  else:
    return -1

cars_new['seller_type'] = cars_new['seller_type'].map(ref2)

def ref3(x):
  if x == 'Petrol':
    return 1
  elif x == 'Diesel':
    return 0
  else:
    return -1

cars_new['fuel'] = cars_new['fuel'].map(ref3)

owners = pd.get_dummies(cars_new['owner'])

X = pd.concat([cars_new, owners], axis=1)

cars_new.head(10)

y = X['selling_price']
X = X.drop(['selling_price', 'name', 'owner'], axis = 1)

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.decomposition import PCA

Xtrain, Xtest, ytrain, ytest = train_test_split(X[:3000], y[:3000], test_size=0.2)

random_model = RandomForestRegressor(n_estimators=300, random_state = 42, n_jobs = -1)

#Fit
random_model.fit(Xtrain, ytrain)

y_pred = random_model.predict(Xtest)

#Checking the accuracy
random_model_accuracy = round(random_model.score(Xtrain, ytrain)*100,2)
print(round(random_model_accuracy, 2), '%')


reg = LinearRegression()

reg.fit(Xtrain, ytrain)

print(round(reg.score(Xtrain, ytrain)*100, 2))

# Save the trained model as a pickle string.
import pickle 

saved_model = pickle.dump(random_model, open('drive/MyDrive/Projects/Car Price Prediction.pickle','wb'))
